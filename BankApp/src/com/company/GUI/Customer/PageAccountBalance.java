package com.company.GUI.Customer;

import com.company.Account.Account;
import com.company.Account.AccountType;
import com.company.Account.LoanAccount;
import com.company.Currency.Currency;
import com.company.Currency.CurrencyType;
import com.company.GUI.PageManager;
import com.company.GUI.MyPage;
import com.company.Persons.Customer;
import com.company.Stock.StockMarket;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Class of page for viewing account balance
 */
public class PageAccountBalance implements MyPage {
    private JPanel rootPanel;
    private JLabel lbTitle;
    private JTable tbBalance;
    private JScrollPane sp;
    private JButton btCancel;

    /**
     * Constructor
     * @param customer Holds info about current customer
     * @param currency Holds Forex info for the day
     * @param stockMarket  Holds Stock info for the day
     */
    public PageAccountBalance(Customer customer, Currency currency, StockMarket stockMarket) {
        tbBalance.setModel(new DefaultTableModel(
                null,
                new String[]{"Count", "Account Id", "Account Type", "Currency", "Balance"}
        ));
        btCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                PageManager.backToOldPage();
            }
        });
        int count = 1;
        Map<AccountType, List<Account>> accounts = customer.getAllAccounts();
        for (AccountType accountType : accounts.keySet()) {
            List<Account> accountsByType = customer.getAccountsByType(accountType);
            for (Account account : accountsByType) {
                if (account.getTYPE().equals(AccountType.LOAN)) {
                    DefaultTableModel model = (DefaultTableModel) tbBalance.getModel();
                    Map<LocalDate, Double> amountsDue = ((LoanAccount) account).getAmountsDue();
                    Double loanBalance = 0.0;
                    for (Map.Entry<LocalDate, Double> entry : amountsDue.entrySet()) {
                        loanBalance = entry.getValue();
                    }
                    model.addRow(new Object[]{String.valueOf(count), account.getAccountId(), accountType.toString(), "USD", loanBalance});
                } else {
                    DefaultTableModel model = (DefaultTableModel) tbBalance.getModel();
                    model.addRow(new Object[]{String.valueOf(count), account.getAccountId(), accountType.toString(), "", ""});
                    Map<CurrencyType, Double> map = account.getBalance();
                    for (Map.Entry<CurrencyType, Double> entry : map.entrySet()) {
                        System.out.println("                                             " + entry.getKey() + "         " + entry.getValue());
                        model.addRow((new Object[]{"", "", "", entry.getKey(), String.valueOf(entry.getValue())}));
                    }
                }
                count += 1;
            }
        }
        // Below for testing
        System.out.println();
        System.out.println("Current Loans : ");
        System.out.println();
        System.out.println("********************************************************************************************");
        System.out.println("           Date            Balance");
        count = 1;
        List<Account> allLoanAccounts = customer.getAccountsByType(AccountType.LOAN);
        Map<LocalDate, Double> amountsDue = new HashMap<>();
        for (Account loanAccount : allLoanAccounts) {
            amountsDue = ((LoanAccount) loanAccount).getAmountsDue();
        }
        for (Map.Entry<LocalDate, Double> entry : amountsDue.entrySet()) {
            System.out.println("<" + count + ">" + "          " + entry.getKey() + "         " + entry.getValue());
            count += 1;
        }
        System.out.println("********************************************************************************************");

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        lbTitle = new JLabel();
        lbTitle.setText("Account Balance");
        rootPanel.add(lbTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sp = new JScrollPane();
        rootPanel.add(sp, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tbBalance = new JTable();
        sp.setViewportView(tbBalance);
        btCancel = new JButton();
        btCancel.setText("Cancel");
        rootPanel.add(btCancel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    /**
     * Method for getting root panel
     * @return root panel
     */
    @Override
    public JPanel getRootPanel() {
        return rootPanel;
    }
}
