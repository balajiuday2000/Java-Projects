package com.company.GUI.Manager;

import com.company.Account.Account;
import com.company.Account.AccountType;
import com.company.Currency.CurrencyType;
import com.company.Factories.PersonFactory;
import com.company.GUI.PageManager;
import com.company.GUI.MyPage;
import com.company.Persons.Customer;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Map;

/**
 * Class of page for viewing customer info
 */
public class PageCustomerInfo implements MyPage {
    private JPanel rootPanel;
    private JLabel lbTitle;
    private JLabel lbID;
    private JTextField tfID;
    private JScrollPane sp;
    private JTable tbInfo;
    private JButton btCancel;
    private JButton btSearch;

    /**
     * Constructor
     */
    public PageCustomerInfo() {
        tbInfo.setModel(new DefaultTableModel(
                null,
                new String[]{"No.", "Account ID", "Account Type", "Currency", "Balance"}
        ));
        btCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                PageManager.backToOldPage();
            }
        });
        btSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel model = (DefaultTableModel) tbInfo.getModel();
                PersonFactory personFactory = new PersonFactory();
                String ID = tfID.getText();
                Customer customer = personFactory.produceCustomerById(ID);
                Map<AccountType, List<Account>> accounts = customer.getAllAccounts();
                int count = 1;
                for (AccountType accountType : accounts.keySet()) {
                    List<Account> accountsByType = customer.getAccountsByType(accountType);
                    for (Account account : accountsByType) {
                        model.addRow(new Object[]{
                                count,
                                account.getAccountId(),
                                account.getTYPE(),
                                "",
                                "",
                        });
                        Map<CurrencyType, Double> map = account.getBalance();
                        for (Map.Entry<CurrencyType, Double> entry : map.entrySet()) {
                            model.addRow(new Object[]{
                                    "",
                                    "",
                                    "",
                                    entry.getKey(),
                                    entry.getValue()
                            });
                        }
                        count += 1;
                    }
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
        lbTitle = new JLabel();
        lbTitle.setText("Customer Info");
        rootPanel.add(lbTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbID = new JLabel();
        lbID.setText("Enter customer ID:");
        rootPanel.add(lbID, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfID = new JTextField();
        rootPanel.add(tfID, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sp = new JScrollPane();
        rootPanel.add(sp, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tbInfo = new JTable();
        sp.setViewportView(tbInfo);
        btCancel = new JButton();
        btCancel.setText("Cancel");
        rootPanel.add(btCancel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btSearch = new JButton();
        btSearch.setText("Search");
        rootPanel.add(btSearch, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    /**
     * Method for getting root panel
     * @return
     */
    @Override
    public JPanel getRootPanel() {
        return rootPanel;
    }
}
